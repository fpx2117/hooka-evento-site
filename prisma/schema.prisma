// ========================================================
// Prisma Schema — Entradas Generales y VIP (por ubicación)
// DB: PostgreSQL
// ========================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================= Enums =========================

enum PaymentStatus {
  pending
  approved
  rejected
  in_process
  failed_preference
  cancelled
  refunded
  charged_back
}

enum PaymentMethod {
  mercadopago
  transferencia
  efectivo
}

enum DiscountType {
  percent // porcentaje (ej: 10 = 10%)
  amount  // monto fijo (ej: 500)
}

enum Gender {
  hombre
  mujer
}

enum TableLocation {
  piscina
  dj
  general
}

enum TicketType {
  general
  vip
}

// ========================= Admin =========================

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())

  @@index([username])
}

// ========================= Evento =========================

model Event {
  id            String           @id @default(cuid())
  code          String           @unique
  name          String
  date          DateTime
  isActive      Boolean          @default(true)

  ticketConfig  TicketConfig[]
  vipConfigs    VipTableConfig[]

  tickets       Ticket[]
  discountRules DiscountRule[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// ========================= Ticket =========================
// - GENERAL: quantity = personas, gender = hombre|mujer
// - VIP:     vipLocation + vipTables + capacityPerTable + tableNumber

model Ticket {
  id                 String         @id @default(cuid())

  eventId            String
  event              Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)

  ticketType         TicketType
  gender             Gender?                 // sólo en general
  quantity           Int            @default(1) // personas (sólo general)

  // VIP (por ubicación, en mesas)
  vipLocation        TableLocation?
  vipTables          Int?                      // mesas compradas (VIP)
  capacityPerTable   Int?                      // personas por mesa (VIP)
  tableNumber        Int?                      // número de mesa específica (nuevo)

  totalPrice         Decimal        @db.Decimal(10, 2)

  customerName       String
  customerEmail      String
  customerPhone      String
  customerDni        String

  paymentId          String?        @unique
  paymentStatus      PaymentStatus  @default(pending)
  paymentMethod      PaymentMethod  @default(mercadopago)

  qrCode             String?        @unique
  validationCode     String?        @unique
  validated          Boolean        @default(false)
  validatedAt        DateTime?

  purchaseDate       DateTime       @default(now())
  eventDate          DateTime?
  expiresAt          DateTime?

  ticketConfigId     String?
  ticketConfig       TicketConfig?  @relation(fields: [ticketConfigId], references: [id], onDelete: SetNull)

  emailSentAt        DateTime?

  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@index([eventId])
  @@index([customerEmail])
  @@index([customerDni])
  @@index([paymentId])
  @@index([paymentStatus, purchaseDate])
  @@index([ticketType, gender])
  @@index([emailSentAt])
  @@index([vipLocation])
  @@index([tableNumber])
}

// ========================= Reglas de descuento =========================

model DiscountRule {
  id         String        @id @default(cuid())

  eventId    String
  event      Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)

  ticketType String
  gender     Gender?

  minQty     Int
  type       DiscountType
  value      Decimal       @db.Decimal(10, 2)
  isActive   Boolean       @default(true)
  priority   Int           @default(0)

  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@unique([eventId, ticketType, gender, minQty])
  @@index([eventId, ticketType, gender, isActive])
}

// ========================= Configuración de ENTRADAS =========================

model TicketConfig {
  id         String        @id @default(cuid())

  eventId    String
  event      Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)

  ticketType String
  gender     Gender?

  price      Decimal       @db.Decimal(10, 2)
  stockLimit Int           @default(0)
  soldCount  Int           @default(0)

  tickets    Ticket[]

  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@unique([eventId, ticketType, gender], name: "eventId_ticketType_gender")
  @@index([eventId, ticketType, gender])
  @@index([eventId])
  @@index([ticketType])
}

// ========================= Configuración MESAS VIP =========================

model VipTableConfig {
  id               String        @id @default(cuid())

  eventId          String
  event            Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)

  location         TableLocation
  price            Decimal       @db.Decimal(10, 2)

  stockLimit       Int
  soldCount        Int           @default(0)
  capacityPerTable Int           @default(10)

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@unique([eventId, location])
  @@index([eventId, location])
}
